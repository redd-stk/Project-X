generate a flutter code of a container of height 250 and width 300 with a camera icon and a "scan Qr code" text button inside that navigates to a qr code scan screen.
Copy code
import 'package:flutter/material.dart';
import 'package:qr_code_scanner/qr_code_scanner.dart';

class QrScannerContainer extends StatefulWidget {
  @override
  _QrScannerContainerState createState() => _QrScannerContainerState();
}

class _QrScannerContainerState extends State<QrScannerContainer> {
  GlobalKey qrKey = GlobalKey();
  QRViewController controller;
  String qrText = "";

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 250,
      width: 300,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Icon(
            Icons.camera_alt,
            size: 50,
          ),
          SizedBox(
            height: 10,
          ),
          TextButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => QRViewExample(
                    key: qrKey,
                    onQRViewCreated: _onQRViewCreated,
                  ),
                ),
              );
            },
            child: Text("Scan QR Code"),
          ),
        ],
      ),
    );
  }

  void _onQRViewCreated(QRViewController controller) {
    this.controller = controller;
    controller.scannedDataStream.listen((scanData) {
      setState(() {
        qrText = scanData;
      });
    });
  }

  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }
}
In the above code, we created a stateful widget called QrScannerContainer. Inside the state, we have defined a container with a height of 250 and width of 300. Inside this container, we have a Column widget that contains an Icon of a camera and a button with text "Scan QR Code" which on press navigates to the QRViewExample screen. The QRViewExample screen is where the QR code scan takes place, and the scanned data is returned to the parent screen. The QRViewController is used to control the QRView and listen to the scanned data stream. The scanned data is then stored in the qrText variable. The QRViewController is disposed of in the dispose method, and the scanned data is returned to the parent screen.